# Nginx reverse proxy for stacks-agents
# - SSL termination
# - Proxy /api to backend API
# - Serve frontend via upstream
# - Basic rate limiting and gzip

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

load_module modules/ngx_http_js_module.so; # if available; harmless if missing

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;
  keepalive_timeout  65;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  # Rate limiting (optional basic)
  limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

  upstream api_upstream {
    server api:3000;
    keepalive 32;
  }

  upstream fe_upstream {
    server frontend:5173;
    keepalive 32;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen 80;
    listen [::]:80;
    server_name _;

    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;

    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE+AESGCM';
    ssl_prefer_server_ciphers on;

    # Health endpoint
    location = /nginx-health { return 200 'ok'; add_header Content-Type text/plain; }

    # API reverse proxy
    location /api/ {
      limit_req zone=api_limit burst=20 nodelay;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_pass http://api_upstream/api/;
      proxy_read_timeout 60s;
    }

    # Frontend
    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://fe_upstream/;
      proxy_read_timeout 60s;
    }
  }
}
